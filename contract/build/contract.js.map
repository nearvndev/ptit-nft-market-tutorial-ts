{"version":3,"file":"contract.js","sources":["../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/near-sdk-js/lib/utils.js","../node_modules/@scure/base/lib/esm/index.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/collections/unordered-set.js","../src/internal.ts","../src/metadata.ts","../src/enummeration.ts","../src/mint.ts","../src/contract.ts"],"sourcesContent":["export var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","export function u8ArrayToBytes(array) {\n    let ret = \"\";\n    for (let e of array) {\n        ret += String.fromCharCode(e);\n    }\n    return ret;\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    let ret = new Uint8Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        ret[i] = bytes.charCodeAt(i);\n    }\n    return ret;\n}\nexport function bytes(strOrU8Array) {\n    if (typeof strOrU8Array == \"string\") {\n        return checkStringIsBytes(strOrU8Array);\n    }\n    else if (strOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(strOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(str) {\n    for (let i = 0; i < str.length; i++) {\n        if (str.charCodeAt(i) > 255) {\n            throw new Error(`string ${str} at index ${i}: ${str[i]} is not a valid byte`);\n        }\n    }\n    return str;\n}\nexport function assert(b, str) {\n    if (b) {\n        return;\n    }\n    else {\n        throw Error(\"assertion failed: \" + str);\n    }\n}\n","/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexport const utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = genBech32('bech32');\nexport const bech32m = genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString;\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n","import { bytes } from \"../utils\";\nimport { base58 } from '@scure/base';\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nfunction data_len(c) {\n    switch (c) {\n        case CurveType.ED25519:\n            return 32;\n        case CurveType.SECP256K1:\n            return 64;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction split_key_type_data(value) {\n    let idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [curveTypeFromStr(value.substring(0, idx)), value.substring(idx + 1)];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length) {\n        super(`Invalid length: ${length}`);\n        this.length = length;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\nexport class PublicKey {\n    constructor(data) {\n        this.data = data;\n        let curve_type = data.charCodeAt(0);\n        let curve_len = data_len(curve_type);\n        if (data.length != curve_len + 1) {\n            throw new InvalidLengthError(data.length);\n        }\n        this.data = data;\n    }\n    curveType() {\n        return this.data.charCodeAt(0);\n    }\n    static fromString(s) {\n        let [curve, key_data] = split_key_type_data(s);\n        let data;\n        try {\n            data = bytes(base58.decode(key_data));\n        }\n        catch (err) {\n            throw new Base58Error(err.message);\n        }\n        return new PublicKey(String.fromCharCode(curve) + data);\n    }\n}\n","import { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\nexport function log(...params) {\n    env.log(`${params\n        .map(x => x === undefined ? 'undefined' : x) // Stringify undefined\n        .map(x => typeof (x) === 'object' ? JSON.stringify(x) : x) // Convert Objects to strings\n        .join(' ')}` // Convert to string\n    );\n}\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\nexport function blockIndex() {\n    return env.block_index();\n}\nexport function blockHeight() {\n    return blockIndex();\n}\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\nexport function epochHeight() {\n    return env.epoch_height();\n}\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\nexport function usedGas() {\n    return env.used_gas();\n}\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    let ret = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (ret === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function storageRead(key) {\n    let ret = env.storage_read(key, 0);\n    if (ret === 1n) {\n        return env.read_register(0);\n    }\n    else {\n        return null;\n    }\n}\nexport function storageHasKey(key) {\n    let ret = env.storage_has_key(key);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    let ret = env.alt_bn128_pairing_check(value);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\nexport function storageUsage() {\n    return env.storage_usage();\n}\nexport function accountBalance() {\n    return env.account_balance();\n}\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\nexport function valueReturn(value) {\n    env.value_return(value);\n}\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\nexport function promiseAnd(...promiseIndex) {\n    return env.promise_and(...promiseIndex);\n}\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\nexport function promiseResult(resultIdx) {\n    let status = env.promise_result(resultIdx, 0);\n    if (status == PromiseResult.Successful) {\n        return env.read_register(0);\n    }\n    else {\n        throw Error(`Promise result ${status == PromiseResult.Failed ? \"Failed\" :\n            status == PromiseResult.NotReady ? \"NotReady\" : status}`);\n    }\n}\nexport function promiseReturn(promiseIdx) {\n    env.promise_return(promiseIdx);\n}\nexport function storageWrite(key, value) {\n    let exist = env.storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageRemove(key) {\n    let exist = env.storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n","import * as near from \"./api\";\nexport function initialize({}) {\n    return function (target, key, descriptor) {\n    };\n}\nexport function call({ privateFunction = false, payableFunction = false }) {\n    return function (target, key, descriptor) {\n        const originalMethod = descriptor.value;\n        descriptor.value = function (...args) {\n            if (privateFunction && near.predecessorAccountId() !== near.currentAccountId()) {\n                throw Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > BigInt(0)) {\n                throw Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function view({}) {\n    return function (target, key, descriptor) {\n    };\n}\nexport function NearBindgen({ requireInit = false }) {\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageRead(\"STATE\");\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(obj) {\n                near.storageWrite(\"STATE\", this._serialize(obj));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value) {\n                return JSON.stringify(value);\n            }\n            static _deserialize(value) {\n                return JSON.parse(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    if (classObject[item].constructor?.deserialize !== undefined) {\n                        classObject[item] = classObject[item].constructor.deserialize(plainObject[item]);\n                    }\n                    else {\n                        classObject[item] = plainObject[item];\n                    }\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","import * as near from '../api';\nexport class LookupMap {\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    containsKey(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return near.storageHasKey(storageKey);\n    }\n    get(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let raw = near.storageRead(storageKey);\n        if (raw !== null) {\n            return JSON.parse(raw);\n        }\n        return null;\n    }\n    remove(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        if (near.storageRemove(storageKey)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    set(key, value) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let storageValue = JSON.stringify(value);\n        if (near.storageWrite(storageKey, storageValue)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    extend(objects) {\n        for (let kv of objects) {\n            this.set(kv[0], kv[1]);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes } from \"../utils\";\nconst ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nfunction indexToKey(prefix, index) {\n    let data = new Uint32Array([index]);\n    let array = new Uint8Array(data.buffer);\n    let key = u8ArrayToBytes(array);\n    return prefix + key;\n}\n/// An iterable implementation of vector that stores its content on the trie.\n/// Uses the following map: index -> element\nexport class Vector {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n    }\n    isEmpty() {\n        return this.length == 0;\n    }\n    get(index) {\n        if (index >= this.length) {\n            return null;\n        }\n        let storageKey = indexToKey(this.prefix, index);\n        return JSON.parse(near.storageRead(storageKey));\n    }\n    /// Removes an element from the vector and returns it in serialized form.\n    /// The removed element is replaced by the last element of the vector.\n    /// Does not preserve ordering, but is `O(1)`.\n    swapRemove(index) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else if (index + 1 == this.length) {\n            return this.pop();\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            let last = this.pop();\n            if (near.storageWrite(key, JSON.stringify(last))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    push(element) {\n        let key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWrite(key, JSON.stringify(element));\n    }\n    pop() {\n        if (this.isEmpty()) {\n            return null;\n        }\n        else {\n            let lastIndex = this.length - 1;\n            let lastKey = indexToKey(this.prefix, lastIndex);\n            this.length -= 1;\n            if (near.storageRemove(lastKey)) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    replace(index, element) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            if (near.storageWrite(key, JSON.stringify(element))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    clear() {\n        for (let i = 0; i < this.length; i++) {\n            let key = indexToKey(this.prefix, i);\n            near.storageRemove(key);\n        }\n        this.length = 0;\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let vector = new Vector(data.prefix);\n        vector.length = data.length;\n        return vector;\n    }\n}\nexport class VectorIterator {\n    constructor(vector) {\n        this.current = 0;\n        this.vector = vector;\n    }\n    next() {\n        if (this.current < this.vector.length) {\n            let value = this.vector.get(this.current);\n            this.current += 1;\n            return { value, done: false };\n        }\n        return { value: null, done: true };\n    }\n}\n","import { Vector, VectorIterator } from \"./vector\";\nimport { LookupMap } from \"./lookup-map\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedMap {\n    constructor(prefix) {\n        this.prefix = prefix;\n        this.keys = new Vector(prefix + 'u'); // intentional different prefix with old UnorderedMap\n        this.values = new LookupMap(prefix + 'm');\n    }\n    get length() {\n        let keysLen = this.keys.length;\n        return keysLen;\n    }\n    isEmpty() {\n        let keysIsEmpty = this.keys.isEmpty();\n        return keysIsEmpty;\n    }\n    get(key) {\n        let valueAndIndex = this.values.get(key);\n        if (valueAndIndex === null) {\n            return null;\n        }\n        let value = valueAndIndex[0];\n        return value;\n    }\n    set(key, value) {\n        let valueAndIndex = this.values.get(key);\n        if (valueAndIndex !== null) {\n            let oldValue = valueAndIndex[0];\n            valueAndIndex[0] = value;\n            this.values.set(key, valueAndIndex);\n            return oldValue;\n        }\n        let nextIndex = this.length;\n        this.keys.push(key);\n        this.values.set(key, [value, nextIndex]);\n        return null;\n    }\n    remove(key) {\n        let oldValueAndIndex = this.values.remove(key);\n        if (oldValueAndIndex === null) {\n            return null;\n        }\n        let index = oldValueAndIndex[1];\n        if (this.keys.swapRemove(index) === null) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        // the last key is swapped to key[index], the corresponding [value, index] need update\n        if (this.keys.length > 0 && index != this.keys.length) {\n            // if there is still elements and it was not the last element\n            let swappedKey = this.keys.get(index);\n            let swappedValueAndIndex = this.values.get(swappedKey);\n            if (swappedValueAndIndex === null) {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n            this.values.set(swappedKey, [swappedValueAndIndex[0], index]);\n        }\n        return oldValueAndIndex[0];\n    }\n    clear() {\n        for (let key of this.keys) {\n            // Set instead of remove to avoid loading the value from storage.\n            this.values.set(key, null);\n        }\n        this.keys.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    extend(kvs) {\n        for (let [k, v] of kvs) {\n            this.set(k, v);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let map = new UnorderedMap(data.prefix);\n        // reconstruct keys Vector\n        map.keys = new Vector(data.prefix + \"u\");\n        map.keys.length = data.keys.length;\n        // reconstruct values LookupMap\n        map.values = new LookupMap(data.prefix + \"m\");\n        return map;\n    }\n}\nclass UnorderedMapIterator {\n    constructor(unorderedMap) {\n        this.keys = new VectorIterator(unorderedMap.keys);\n        this.map = unorderedMap.values;\n    }\n    next() {\n        let key = this.keys.next();\n        let value;\n        if (!key.done) {\n            value = this.map.get(key.value);\n            if (value === null) {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n        return { value: [key.value, value ? value[0] : value], done: key.done };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nfunction serializeIndex(index) {\n    let data = new Uint32Array([index]);\n    let array = new Uint8Array(data.buffer);\n    return u8ArrayToBytes(array);\n}\nfunction deserializeIndex(rawIndex) {\n    let array = bytesToU8Array(rawIndex);\n    let data = new Uint32Array(array.buffer);\n    return data[0];\n}\nexport class UnorderedSet {\n    constructor(prefix) {\n        this.prefix = prefix;\n        this.elementIndexPrefix = prefix + \"i\";\n        let elementsPrefix = prefix + \"e\";\n        this.elements = new Vector(elementsPrefix);\n    }\n    get length() {\n        return this.elements.length;\n    }\n    isEmpty() {\n        return this.elements.isEmpty();\n    }\n    contains(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        return near.storageHasKey(indexLookup);\n    }\n    set(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        if (near.storageRead(indexLookup)) {\n            return false;\n        }\n        else {\n            let nextIndex = this.length;\n            let nextIndexRaw = serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.elements.push(element);\n            return true;\n        }\n    }\n    remove(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.length == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastElement = this.elements.get(this.length - 1);\n                if (!lastElement) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastElement != element) {\n                    let lastLookupElement = this.elementIndexPrefix + JSON.stringify(lastElement);\n                    near.storageWrite(lastLookupElement, indexRaw);\n                }\n            }\n            let index = deserializeIndex(indexRaw);\n            this.elements.swapRemove(index);\n            return true;\n        }\n        return false;\n    }\n    clear() {\n        for (let element of this.elements) {\n            let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n            near.storageRemove(indexLookup);\n        }\n        this.elements.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return this.elements[Symbol.iterator]();\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.set(element);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let set = new UnorderedSet(data.prefix);\n        // reconstruct Vector\n        let elementsPrefix = data.prefix + \"e\";\n        set.elements = new Vector(elementsPrefix);\n        set.elements.length = data.elements.length;\n        return set;\n    }\n}\n","import { UnorderedSet } from \"near-sdk-js\";\nimport { NFTContract } from \"./contract\";\n//add a token to the set of tokens an owner has\nexport function internalAddTokenToOwner(contract: NFTContract, accountId: string, tokenId: string) {\n    //get the set of tokens for the given account\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n\n    if(tokenSet == null) {\n        //if the account doesn't have any tokens, we create a new unordered set\n        tokenSet = new UnorderedSet(\"tokensPerOwner\" + accountId.toString());\n    }\n\n    //we insert the token ID into the set\n    tokenSet.set(tokenId);\n\n    //we insert that set for the given account ID. \n    contract.tokensPerOwner.set(accountId, tokenSet);\n}\n\n// Gets a collection and deserializes it into a set that can be used.\nexport function restoreOwners(collection) {\n    if (collection == null) {\n        return null;\n    }\n    return UnorderedSet.deserialize(collection as UnorderedSet);\n}","import { near } from \"near-sdk-js\";\nimport { NFTContract } from \"./contract\";\n\nexport class NFTContractMetadata {\n    spec: string;\n    name: string;\n    symbol: string;\n    icon?: string;\n    base_uri?: string;\n    reference?: string;\n    reference_hash?: string;\n\n    constructor(\n        {\n            spec, \n            name, \n            symbol, \n            icon, \n            baseUri, \n            reference, \n            referenceHash\n        }:{ \n            spec: string, \n            name: string, \n            symbol: string, \n            icon?: string, \n            baseUri?: string, \n            reference?: string, \n            referenceHash?: string\n        }) {\n        this.spec = spec  // required, essentially a version like \"nft-1.0.0\"\n        this.name = name  // required, ex. \"Mosaics\"\n        this.symbol = symbol // required, ex. \"MOSAIC\"\n        this.icon = icon // Data URL\n        this.base_uri = baseUri // Centralized gateway known to have reliable access to decentralized storage assets referenced by `reference` or `media` URLs\n        this.reference = reference // URL to a JSON file with more info\n        this.reference_hash = referenceHash // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.\n    }\n}\n\nexport class TokenMetadata {\n    title?: string;\n    description?: string;\n    media?: string;\n    media_hash?: string;\n    copies?: number;\n    issued_at?: string;\n    expires_at?: string;\n    starts_at?: string;\n    updated_at?: string;\n    extra?: string;\n    reference?: string;\n    reference_hash?: string;\n\n    constructor(\n        {\n            title, \n            description, \n            media, \n            mediaHash, \n            copies, \n            issuedAt, \n            expiresAt, \n            startsAt, \n            updatedAt, \n            extra, \n            reference, \n            referenceHash\n        }:{\n            title?: string, \n            description?: string, \n            media?: string, \n            mediaHash?: string, \n            copies?: number, \n            issuedAt?: string, \n            expiresAt?: string, \n            startsAt?: string, \n            updatedAt?: string, \n            extra?: string, \n            reference?: string, \n            referenceHash?: string}\n        ) {\n        this.title = title // ex. \"Arch Nemesis: Mail Carrier\" or \"Parcel #5055\"\n        this.description = description // free-form description\n        this.media = media // URL to associated media, preferably to decentralized, content-addressed storage\n        this.media_hash = mediaHash // Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.\n        this.copies = copies // number of copies of this set of metadata in existence when token was minted.\n        this.issued_at = issuedAt // ISO 8601 datetime when token was issued or minted\n        this.expires_at = expiresAt // ISO 8601 datetime when token expires\n        this.starts_at = startsAt // ISO 8601 datetime when token starts being valid\n        this.updated_at = updatedAt // ISO 8601 datetime when token was last updated\n        this.extra = extra // anything extra the NFT wants to store on-chain. Can be stringified JSON.\n        this.reference = reference // URL to an off-chain JSON file with more info.\n        this.reference_hash = referenceHash // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.\n    }\n}\n\nexport class Token {\n    owner_id: string;\n\n    constructor({ ownerId}: { ownerId: string}) {\n        this.owner_id = ownerId;\n    }\n}\n\nexport class JsonToken {\n    token_id: string;\n    owner_id: string;\n    metadata: TokenMetadata;\n\n    constructor({tokenId, ownerId, metadata}: { tokenId: string, ownerId: string, metadata: TokenMetadata }) {\n        this.token_id = tokenId;\n        this.owner_id = ownerId;\n        this.metadata = metadata;\n    }\n}\n\nexport function internalNFTMetadata({ contract }: {contract: NFTContract}): NFTContractMetadata {\n    near.log(JSON.stringify(contract.metadata));\n    return contract.metadata;\n}","import { NFTContract } from \"./contract\";\nimport { restoreOwners } from \"./internal\";\nimport { JsonToken, Token, TokenMetadata } from \"./metadata\";\n\nexport function internalNFTTotalSupply({contract}: {contract: NFTContract}): number {\n    return contract.tokenMetadataById.length;\n}\n\n//Query for nft tokens on the contract regardless of the owner using pagination\nexport function internalNftTokens({\n    contract,\n    fromIndex,\n    limit\n}:{ \n    contract: NFTContract, \n    fromIndex?: string, \n    limit?: number\n}): JsonToken[] {\n    let tokens = [];\n\n    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    //take the first \"limit\" elements in the array. If we didn't specify a limit, use 50\n    let max = limit ? limit : 50;\n\n    let keys = contract.tokenMetadataById.toArray();\n    // Paginate through the keys using the fromIndex and limit\n    for (let i = start; i < keys.length && i < start + max; i++) {\n        // get the token object from the keys\n        let jsonToken = internalNftToken({contract, tokenId: keys[i][0]});\n        tokens.push(jsonToken);\n    }\n    return tokens;\n}\n\nexport function add({a, b}: {a: number, b: number}): number {\n    return a+b;\n}\n\n/**\n * get token by id\n */\nexport function internalNftToken({\n    contract,\n    tokenId\n}:{ \n    contract: NFTContract, \n    tokenId: string \n}): JsonToken {\n    let token = contract.tokensById.get(tokenId) as Token;\n    //if there wasn't a token ID in the tokens_by_id collection, we return None\n    if (token == null) {\n        return null;\n    }\n\n    //if there is some token ID in the tokens_by_id collection\n    //we'll get the metadata for that token\n    let metadata = contract.tokenMetadataById.get(tokenId) as TokenMetadata;\n    \n    //we return the JsonToken\n    let jsonToken = new JsonToken({\n        tokenId: tokenId,\n        ownerId: token.owner_id,\n        metadata\n    });\n    return jsonToken;\n}\n\n//get the total supply of NFTs for a given owner\nexport function internalSupplyForOwner({\n    contract,\n    accountId\n}:{\n    contract: NFTContract, \n    accountId: string\n}): number {\n    //get the set of tokens for the passed in owner\n    let tokens = restoreOwners(contract.tokensPerOwner.get(accountId));\n    //if there isn't a set of tokens for the passed in account ID, we'll return 0\n    if (tokens == null) {\n        return 0\n    }\n\n    //if there is some set of tokens, we'll return the length \n    return tokens.length;\n}\n\n//Query for all the tokens for an owner\nexport function internalTokensForOwner({\n    contract,\n    accountId,\n    fromIndex,\n    limit\n}:{\n    contract: NFTContract, \n    accountId: string, \n    fromIndex?: string, \n    limit?: number\n}): JsonToken[] {\n    //get the set of tokens for the passed in owner\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n\n    //if there isn't a set of tokens for the passed in account ID, we'll return 0\n    if (tokenSet == null) {\n        return [];\n    }\n    \n    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    //take the first \"limit\" elements in the array. If we didn't specify a limit, use 50\n    let max = limit ? limit : 50;\n\n    let keys = tokenSet.toArray();\n    let tokens: JsonToken[] = []\n    for(let i = start; i < max; i++) {\n        if(i >= keys.length) {\n            break;\n        }\n        let token = internalNftToken({contract, tokenId: keys[i]});\n        tokens.push(token);\n    }\n    return tokens;\n}","import { assert, near } from \"near-sdk-js\";\nimport { NFTContract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \"./contract\";\nimport { internalAddTokenToOwner } from \"./internal\";\nimport { Token, TokenMetadata } from \"./metadata\";\n\nexport function internalMint({\n    contract,\n    tokenId,\n    metadata,\n    receiverId\n}: {\n    contract: NFTContract,\n    tokenId: string,\n    metadata: TokenMetadata,\n    receiverId: string\n}): void {\n    let token = new Token({\n        ownerId: receiverId\n    });\n    assert(!contract.tokensById.containsKey(tokenId), \"Token already exists\");\n    // Insert token\n    contract.tokensById.set(tokenId, token);\n\n    // Add token to owner\n    internalAddTokenToOwner(contract, receiverId, tokenId);\n\n    // insert token id and metadata\n    contract.tokenMetadataById.set(tokenId, metadata);\n\n    // Construct the mint log as per the events standard.\n    let nftMintLog = {\n        // Standard name (\"nep171\").\n        standard: NFT_STANDARD_NAME,\n        // Version of the standard (\"nft-1.0.0\").\n        version: NFT_METADATA_SPEC,\n        // The data related with the event stored in a vector.\n        event: \"nft_mint\",\n        data: [\n            {\n                // Owner of the token.\n                owner_id: token.owner_id,\n                // Vector of token IDs that were minted.\n                token_ids: [tokenId],\n            }\n        ]\n    }\n    near.log(`EVENT_JSON:${JSON.stringify(nftMintLog)}`);\n}","import { NearBindgen, near, call, view, LookupMap, UnorderedMap, initialize } from 'near-sdk-js';\nimport { internalNftTokens, internalNFTTotalSupply, internalSupplyForOwner, internalTokensForOwner } from './enummeration';\nimport { internalNFTMetadata, JsonToken, NFTContractMetadata } from './metadata';\nimport { internalMint } from './mint';\n\n/// This spec can be treated like a version of the standard.\nexport const NFT_METADATA_SPEC = \"nft-1.0.0\";\n\n/// This is the name of the NFT standard we're using\nexport const NFT_STANDARD_NAME = \"nep171\";\n\n@NearBindgen({})\nexport class NFTContract {\n    owner_id: string;\n    tokensPerOwner: LookupMap = new LookupMap(\"tokensPerOwner\");;\n    tokensById: LookupMap = new LookupMap(\"tokensById\");;\n    tokenMetadataById: UnorderedMap = new UnorderedMap(\"tokenMetadataById\");;\n    metadata: NFTContractMetadata = new NFTContractMetadata(\n        {\n            spec: \"nft-1.0.0\",\n            name: \"PTIT Tutorial Contract\",\n            symbol: \"PTIT-NFT\"\n        });\n\n    @initialize({privateFunction: true})\n    init({owner_id}: {owner_id: string}) {\n        this.owner_id = owner_id;\n    }\n\n    // mint nft\n    @call({payableFunction: true})\n    nft_mint({token_id, metadata, receiver_id}): void {\n        internalMint({contract: this, tokenId: token_id, metadata, receiverId: receiver_id});\n    }\n\n    // Get token data\n    @view({})\n    nft_token({token_id}: {token_id: string}): JsonToken {\n        return null;\n    }\n\n    @call({payableFunction: true})\n    nft_transfer({receiver_id, token_id, approval_id, memo}: {\n        receiver_id: string,\n        token_id: string,\n        approval_id: number|null,\n        memo: string|null,}) {\n\n    }\n\n    @call({payableFunction: true})\n    nft_transfer_call({receiver_id, token_id, approval_id, memo, msg}: {\n        receiver_id: string,\n        token_id: string,\n        approval_id: number|null,\n        memo: string|null,\n        msg: string,\n    }): void {\n\n    }\n\n    @call({privateFunction: true})\n    nft_resolve_transfer({owner_id, receiver_id, token_id, approved_account_ids}: {\n        owner_id: string,\n        receiver_id: string,\n        token_id: string,\n        approved_account_ids: null|Record<string, number>\n    }): void {}\n\n    // Enummeration\n    @view({})\n    nft_total_supply(): number {\n        return internalNFTTotalSupply({contract: this});\n    }\n\n    @view({})\n    nft_tokens({from_index, limit}: { from_index: string | null, limit: number }): JsonToken[] {\n        return internalNftTokens({contract: this, fromIndex: from_index, limit});\n    }\n\n    @view({})\n    nft_supply_for_owner({account_id}: {account_id: string}): number {\n        return internalSupplyForOwner({contract: this, accountId: account_id});\n    }\n\n    @view({})\n    nft_tokens_for_owner({account_id, from_index, limit}: { account_id: string, from_index: string, limit: number }): JsonToken[] {\n        return internalTokensForOwner({contract: this, accountId: account_id, fromIndex: from_index, limit});\n    }\n\n    @view({})\n    nft_metadata(): NFTContractMetadata {\n        return internalNFTMetadata({contract: this});\n    }\n}"],"names":["PromiseResult","PromiseError","u8ArrayToBytes","array","ret","e","String","fromCharCode","bytesToU8Array","bytes","Uint8Array","length","i","charCodeAt","assert","b","str","Error","assertNumber","n","Number","isSafeInteger","chain","args","wrap","a","c","encode","Array","from","reverse","reduce","acc","undefined","decode","alphabet","digits","isArray","map","input","letter","index","indexOf","join","separator","to","split","padding","bits","chr","data","push","end","slice","normalize","fn","convertRadix","pos","res","forEach","d","carry","done","digit","digitBase","Math","floor","gcd","radix2carry","convertRadix2","mask","radix","num","radix2","revPadding","unsafeWrapper","apply","base16","base32","s","toUpperCase","replace","base64","base64url","genBase58","abc","base58","XMR_BLOCK_LEN","base58xmr","block","subarray","padStart","blockLen","j","concat","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","len","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","actualLength","TypeError","toLowerCase","lowered","sepIndex","lastIndexOf","sum","endsWith","decodeUnsafe","decodeToBytes","utf8","TextDecoder","TextEncoder","hex","CODERS","Object","keys","CurveType","U64_MAX","EVICTED_REGISTER","log","params","env","x","JSON","stringify","predecessorAccountId","predecessor_account_id","read_register","attachedDeposit","attached_deposit","storageRead","key","storage_read","storageHasKey","storage_has_key","storageGetEvicted","currentAccountId","current_account_id","storageWrite","value","exist","storage_write","storageRemove","storage_remove","initialize","target","descriptor","call","privateFunction","payableFunction","originalMethod","near","BigInt","view","NearBindgen","requireInit","_create","_getState","rawState","_deserialize","_saveToStorage","obj","_serialize","_getArgs","parse","_reconstruct","classObject","plainObject","item","constructor","deserialize","_requireInit","LookupMap","keyPrefix","containsKey","storageKey","get","raw","remove","set","storageValue","extend","objects","kv","serialize","ERR_INDEX_OUT_OF_BOUNDS","ERR_INCONSISTENT_STATE","indexToKey","Uint32Array","buffer","Vector","isEmpty","swapRemove","pop","last","element","lastIndex","lastKey","elements","Symbol","iterator","VectorIterator","clear","toArray","vector","current","next","UnorderedMap","values","keysLen","keysIsEmpty","valueAndIndex","oldValue","nextIndex","oldValueAndIndex","swappedKey","swappedValueAndIndex","UnorderedMapIterator","kvs","k","unorderedMap","serializeIndex","deserializeIndex","rawIndex","UnorderedSet","elementIndexPrefix","elementsPrefix","contains","indexLookup","nextIndexRaw","indexRaw","lastElement","lastLookupElement","internalAddTokenToOwner","contract","accountId","tokenId","tokenSet","restoreOwners","tokensPerOwner","toString","collection","NFTContractMetadata","spec","name","symbol","icon","baseUri","reference","referenceHash","base_uri","reference_hash","Token","ownerId","owner_id","JsonToken","metadata","token_id","internalNFTMetadata","internalNFTTotalSupply","tokenMetadataById","internalNftTokens","fromIndex","tokens","start","parseInt","max","jsonToken","internalNftToken","token","tokensById","internalSupplyForOwner","internalTokensForOwner","internalMint","receiverId","nftMintLog","standard","NFT_STANDARD_NAME","version","NFT_METADATA_SPEC","event","token_ids","NFTContract","init","nft_mint","receiver_id","nft_token","nft_transfer","approval_id","memo","nft_transfer_call","msg","nft_resolve_transfer","approved_account_ids","nft_total_supply","nft_tokens","from_index","nft_supply_for_owner","account_id","nft_tokens_for_owner","nft_metadata"],"mappings":"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"}